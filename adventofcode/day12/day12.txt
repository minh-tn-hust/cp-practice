// import java.io.BufferedReader;
// import java.io.FileReader;
// import java.io.FileWriter;
// import java.io.IOException;
// import java.io.InputStreamReader;
// import java.io.OutputStreamWriter;
// import java.io.PrintWriter;
// import java.util.Arrays;
// import java.util.HashMap;
// import java.util.Map;
// import java.util.StringTokenizer;

// import javax.swing.DefaultBoundedRangeModel;

// class Debug {
// 	// change to System.getProperty("ONLINE_JUDGE")==null; for CodeForces
// 	public static final boolean LOCAL = true;
// 	private static <T> String ts(T t) {
// 		if(t==null) {
// 			return "null";
// 		}
// 		try {
// 			return ts((Iterable) t);
// 		}catch(ClassCastException e) {
// 			if(t instanceof int[]) {
// 				String s = Arrays.toString((int[]) t);
// 				return "{"+s.substring(1, s.length()-1)+"}";
// 			}else if(t instanceof long[]) {
// 				String s = Arrays.toString((long[]) t);
// 				return "{"+s.substring(1, s.length()-1)+"}";
// 			}else if(t instanceof char[]) {
// 				String s = Arrays.toString((char[]) t);
// 				return "{"+s.substring(1, s.length()-1)+"}";
// 			}else if(t instanceof double[]) {
// 				String s = Arrays.toString((double[]) t);
// 				return "{"+s.substring(1, s.length()-1)+"}";
// 			}else if(t instanceof boolean[]) {
// 				String s = Arrays.toString((boolean[]) t);
// 				return "{"+s.substring(1, s.length()-1)+"}";
// 			}
// 			try {
// 				return ts((Object[]) t);
// 			}catch(ClassCastException e1) {
// 				return t.toString();
// 			}
// 		}
// 	}
// 	private static <T> String ts(T[] arr) {
// 		StringBuilder ret = new StringBuilder();
// 		ret.append("{");
// 		boolean first = true;
// 		for(T t: arr) {
// 			if(!first) {
// 				ret.append(", ");
// 			}
// 			first = false;
// 			ret.append(ts(t));
// 		}
// 		ret.append("}");
// 		return ret.toString();
// 	}
// 	private static <T> String ts(Iterable<T> iter) {
// 		StringBuilder ret = new StringBuilder();
// 		ret.append("{");
// 		boolean first = true;
// 		for(T t: iter) {
// 			if(!first) {
// 				ret.append(", ");
// 			}
// 			first = false;
// 			ret.append(ts(t));
// 		}
// 		ret.append("}");
// 		return ret.toString();
// 	}
// 	public static void dbg(Object... o) {
// 		if(LOCAL) {
// 			System.err.print("Line #"+Thread.currentThread().getStackTrace()[2].getLineNumber()+": [");
// 			for(int i = 0; i<o.length; i++) {
// 				if(i!=0) {
// 					System.err.print(", ");
// 				}
// 				System.err.print(ts(o[i]));
// 			}
// 			System.err.println("]");
// 		}
// 	}
// }

// class Record {
//     String withSpring;
//     int[] damageGroupSizes;

//     public Record(String withSpringCondition, int[] numbers) {
//         withSpring = withSpringCondition;
//         damageGroupSizes = numbers;
//     }
//     @Override
//     public String toString() {
//         // TODO Auto-generated method stub
//         return "(" + withSpring + ", " + Arrays.toString(damageGroupSizes) + ")";
//     }

//     long getAllCompatibleArrangement() {
//         StringBuffer base = new StringBuffer("");
//         for (int i = 0; i < withSpring.length(); i++) {
//             base.append('.');
//         }
//         return tryToGet(0, base);
//     }

//     int getHash(int a, int b) {
//         return b*1009 + 101 * a;
//     }

//     Map<Integer, Long> memo = new HashMap<>();

//     long tryToGet(int groupIndex, StringBuffer currentState) {
//         int size = currentState.length();

//         if (groupIndex == damageGroupSizes.length) {
//             if (isCompatible(currentState)) {
//                 return 1;
//             }
//             return 0;
//         }

//         int damagedGroupSize = damageGroupSizes[groupIndex];

//         int lastIndex = findIndexDamagedGroupEnd(currentState);

//         long numberPossibleArrangement = 0;

//         for (int startIndex = lastIndex + 1; startIndex <= size - damagedGroupSize; startIndex++) {
//             if (canPutGroupAt(currentState, groupIndex, startIndex)) {
//                 if (memo.get(getHash(groupIndex, startIndex)) != null) {
//                     numberPossibleArrangement += memo.get(getHash(groupIndex, startIndex));
//                 } else {
//                     putDamagedGroupAtIndex(currentState, startIndex, groupIndex, '#');
//                     long num = tryToGet(groupIndex + 1, currentState);
//                     memo.put(getHash(groupIndex, startIndex), num);
//                     numberPossibleArrangement += num;

//                     putDamagedGroupAtIndex(currentState, startIndex, groupIndex, '.');
//                 }
//             }
//         }

//         return numberPossibleArrangement;
//     }

//     int findIndexDamagedGroupEnd(StringBuffer currentState) {
//         int lastIndex = -1;
//         for (int i = 0; i < currentState.length(); i++) {
//             if (currentState.charAt(i) == '#') {
//                 lastIndex = i;
//             }
//         }

//         return lastIndex;
//     }

//     boolean canPutGroupAt(StringBuffer currentState, int groupIndex, int startIndex) {
//         if (!hasSpace(currentState, startIndex)) {
//             return false;
//         }

//         int damagedGroupSize = damageGroupSizes[groupIndex];
//         for (int i = 0; i < startIndex; i++) {
//             if (withSpring.charAt(i) == '?') {
//                 continue;
//             }

//             if (withSpring.charAt(i) != currentState.charAt(i)) {
//                 return false;
//             }
//         }

//         for (int i = startIndex; i < startIndex + damagedGroupSize; i++) {
//             if (withSpring.charAt(i) == '?') {
//                 continue;
//             }

//             if (withSpring.charAt(i) != '#') {
//                 return false;
//             }
//         }

//         return true;
//     }

//     boolean hasSpace(StringBuffer currentState, int startIndex) {
//         return (
//             startIndex == 0 || 
//             (startIndex - 1 >= 0 && 
//             currentState.charAt(startIndex - 1) == '.')
//         );
//     }

//     boolean isCompatible(StringBuffer currentState) {
//         for (int i = 0; i < currentState.length(); i++) {
//             if (withSpring.charAt(i) == '?') {
//                 continue;
//             }

//             if (withSpring.charAt(i) != currentState.charAt(i)) {
//                 return false;
//             }
//         }
//         return true;
//     }

//     StringBuffer putDamagedGroupAtIndex(StringBuffer currentState, int startIndex, int groupIndex, char c) {
//         int damagedGroupSize = damageGroupSizes[groupIndex];
//         for (int i = startIndex; i < startIndex + damagedGroupSize; i++) {
//             currentState.replace(i, i + 1, "" + c);
//         }
//         return currentState;
//     }

// } 

// public class day12 {
//     static FastScanner cin;
//     static PrintWriter cout;


//     public static void main(String[] args) {
//         initIO();
//         solve();
//         closeIO();
//     }

//     static void initIO() {
//         try {
//             InputStreamReader readerStream = new FileReader("./adventofcode/local.in");
//             OutputStreamWriter writerStream = new FileWriter("./adventofcode/local.out");
//             cin = new FastScanner(readerStream);
//             cout = new PrintWriter(writerStream);
//         } catch (IOException ioException) {
//             System.err.println(ioException.getStackTrace());
//         }
//     }

//     static void closeIO() {
//         cin.close();
//         cout.close();
//     }


//     static void solve() {
//         int n;
//         n = cin.nextInt();
//         int c = n;

//         long sum = 0;
//         while (n-- > 0) {
//             Record record = getRecord();
//             long num = record.getAllCompatibleArrangement();
//             sum += num;
//         }
//         cout.println(sum);
//     }

//     static int DUPLICATE_TIME = 5;
//     static Record getRecord() {
//         StringBuffer withSpringCondition = new StringBuffer(cin.next());
//         String withNumberFormat = cin.next();

//         StringBuffer duplicate = new StringBuffer();
//         duplicate.append(withSpringCondition);

//         for (int i = 0; i < DUPLICATE_TIME - 1; i++) {
//             duplicate.append("?");
//             duplicate.append(withSpringCondition);
//         }

//         String[] numberOfContinousDamagedSpring = withNumberFormat.split(",");
//         int[] numbers = new int[numberOfContinousDamagedSpring.length * DUPLICATE_TIME];
//         for (int i = 0; i < numberOfContinousDamagedSpring.length * DUPLICATE_TIME; i++) {
//             numbers[i] = Integer.parseInt(numberOfContinousDamagedSpring[i % numberOfContinousDamagedSpring.length]);
//         }


//         return new Record(duplicate.toString(), numbers);
//     }
// }

// class FastScanner {
//     public BufferedReader br;
//     public StringTokenizer st = new StringTokenizer("");

//     FastScanner(InputStreamReader inputStreamReader) {
//         br = new BufferedReader(inputStreamReader);
//     }

//     public String next() {
//         while (!st.hasMoreTokens())
//             try { 
//                 st=new StringTokenizer(br.readLine());				               
//             } catch (IOException e) {}
//         return st.nextToken();
//     }
    
//     public int nextInt() {
//         return Integer.parseInt(next());
//     }

//     public long nextLong() {
//         return Long.parseLong(next());
//     }

//      public String nextLine() 
//         { 
//             String str = ""; 
//             try { 
//                 if(st.hasMoreTokens()){ 
//                     str = st.nextToken("\n"); 
//                 } 
//                 else{ 
//                     str = br.readLine(); 
//                 } 
//             } 
//             catch (IOException e) { 
//                 e.printStackTrace(); 
//             } 
//             return str; 
//         } 
//     public void close() {
//         try {
//             br.close();
//         } catch (IOException ioException) {
//             System.out.println(ioException.getStackTrace());
//         }
//     }
// }